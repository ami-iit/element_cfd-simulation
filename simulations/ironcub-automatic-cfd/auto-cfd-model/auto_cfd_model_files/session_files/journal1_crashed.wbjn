# encoding: utf-8
# 2023 R1
SetScriptVersion(Version="23.1.153")
template1 = GetTemplate(TemplateName="Geometry")
system1 = template1.CreateSystem()
geometry1 = system1.GetContainer(ComponentName="Geometry")
geometry1.SetFile(FilePath=GetAbsoluteUserPathName("ANSYS/testing/share_topology_test/ironcub-model-share.scdoc"))
template2 = GetTemplate(TemplateName="FLTG")
geometryComponent1 = system1.GetComponent(Name="Geometry")
componentTemplate1 = GetComponentTemplate(Name="FluentTGridCellTemplate")
system2 = template2.CreateSystem(
    DataTransferFrom=[Set(FromComponent=geometryComponent1, TransferName=None, ToComponentTemplate=componentTemplate1)],
    Position="Right",
    RelativeTo=system1)
setup1 = system2.GetContainer(ComponentName="Setup")
fluentLauncherSettings1 = setup1.GetFluentLauncherSettings()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}, RunParallel=True, NumberOfProcessorsMeshing=10, NumberOfProcessors=10))
tGridData1 = GetDataEntity("/Mesh/TGridData:TGridData")
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=10))
mesh1 = system2.GetContainer(ComponentName="Mesh")
Fluent.Edit(Container=mesh1)
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=10))
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent1 = system2.GetComponent(Name="Mesh")
meshComponent1.Refresh()
setup1.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup1.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.LengthUnit.set_state(r'm')\")")
setup1.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.AreaUnit.set_state(r'm^2')\")")
setup1.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.VolumeUnit.set_state(r'm^3')\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOIControlName': r'ironcub-sizing',r'BOIFaceLabelList': [r'ironcub-share-left_arm-left_arm', r'ironcub-share-left_arm_pitch-left_arm_pitch', r'ironcub-share-left_arm_roll-left_arm_roll', r'ironcub-share-left_leg_lower-left_leg_lower', r'ironcub-share-left_leg_pitch-left_leg_pitch', r'ironcub-share-left_leg_roll-left_leg_roll', r'ironcub-share-left_leg_upper-left_leg_upper', r'ironcub-share-left_turbine-left_turbine', r'ironcub-share-right_arm-right_arm', r'ironcub-share-right_arm_pitch-right_arm_pitch', r'ironcub-share-right_arm_roll-right_arm_roll', r'ironcub-share-right_leg_lower-right_leg_lower', r'ironcub-share-right_leg_pitch-right_leg_pitch', r'ironcub-share-right_leg_roll-right_leg_roll', r'ironcub-share-right_leg_upper-right_leg_upper', r'ironcub-share-right_turbine-right_turbine', r'ironcub-share-root_link-solid', r'ironcub-share-torso_pitch-torso_pitch', r'ironcub-share-torso_roll-torso_roll', r'ironcub-share-upper_body-head', r'ironcub-share-upper_body-left_back_turbine', r'ironcub-share-upper_body-right_back_turbine', r'ironcub-share-upper_body-torso'],r'BOISize': 0.02,})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOIControlName': r'external-sizing',r'BOIFaceLabelList': [r'ironcub-model-share-inlet', r'ironcub-model-share-outlet'],r'BOISize': 2,})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Arguments.set_state({r'CFDSurfaceMeshControls': {r'MinSize': 0.005,},})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Clipping Planes)*CheckButton5(Insert Clipping Planes)" #t)(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Clipping Planes)*CheckButton5(Insert Clipping Planes)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "PushButton(forward)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "PushButton(forward)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "PushButton(forward)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "PushButton(forward)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "PushButton(forward)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "PushButton(forward)")')
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-0.335279 -0.947183 0.72828) '(0 0 0) '(0.454176 0.285029 0.383414) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.0635501 -0.144868 0.0239614) '(0 0 0) '(0.0524278 0.00728828 0.15029) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.1336 0.0981311 -0.0505441) '(0 0 0) '(-0.0466875 -0.00594693 -0.140601) 0 0)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-1.18514 33.7264 -27.3918) '(0 0 0) '(-0.44336 -0.532591 -0.63735) 0 0)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Arguments.set_state({r'InterfaceSelect': r'Automatic',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Execute()\")")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(0.0104025 -0.0640197 0.0682582) '(0 0 0) '(0.0423589 0.0746408 0.0763966) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.226116 -0.891288 0.246074) '(0 0 0) '(0.37775 0.215026 0.431704) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.0181454 -0.101956 0.0107054) '(0 0 0) '(0.061569 -0.0107282 0.157425) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.375598 1.95359 0.161209) '(0 0 0) '(-0.209112 -0.0177948 -0.269381) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.0335556 -0.108955 0.045331) '(0 0 0) '(0.0518678 0.0157865 0.0743294) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.0929328 0.0638597 0.0414261) '(0 0 0) '(-0.0675126 -0.0176687 -0.0546003) 0 0)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Enclose Fluid Regions (Capping)'].Arguments.set_state({r'LabelSelectionList': [r'inlet'],})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Enclose Fluid Regions (Capping)'].AddChildAndUpdate()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Enclose Fluid Regions (Capping)'].Arguments.set_state({r'LabelSelectionList': [r'outlet'],r'ZoneType': r'pressure-outlet',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Enclose Fluid Regions (Capping)'].AddChildAndUpdate()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['pres_outlet_1'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['velo-inlet_1'].Revert()\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
geometry1.Edit(IsSpaceClaimGeometry=True)
geometry1.Exit()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=10))
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent1.Refresh()
setup1.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Without Save")(cx-gui-do cx-activate-item "Question*OK")')
fluentLauncherSettings1.SetEntityProperties(Properties=Set(Precision="Double", EnvPath={}))
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=10))
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup1.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['velo-inlet_1'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['velo-inlet_1'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['velo-inlet_1'].Arguments.set_state({r'CompleteLabelSelectionList': [r'inlet'],r'LabelSelectionList': [r'inlet'],r'PatchName': r'velo-inlet_1',r'PatchType': r'Annular (2 surface)',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['velo-inlet_1'].Execute()\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Without Save")(cx-gui-do cx-activate-item "Question*OK")')
geometry1.Edit(IsSpaceClaimGeometry=True)
geometry1.Exit()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=10))
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup1.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Enclose Fluid Regions (Capping)'].Arguments.set_state({r'CreatePatchPreferences': {r'CAPIntersectionCheck': r'no',r'ShowCreatePatchPreferences': True,},r'ZoneType': r'pressure-outlet',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['velo-inlet_1'].Arguments.set_state({r'CompleteLabelSelectionList': [r'inlet'],r'CreatePatchPreferences': {r'CAPIntersectionCheck': r'no',r'ShowCreatePatchPreferences': True,},r'LabelSelectionList': [r'inlet'],r'PatchName': r'velo-inlet_1',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['velo-inlet_1'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['pres_outlet_1'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['pres_outlet_1'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['pres_outlet_1'].Arguments.set_state({r'CompleteLabelSelectionList': [r'outlet'],r'CreatePatchPreferences': {r'CAPIntersectionCheck': r'no',r'ShowCreatePatchPreferences': True,},r'LabelSelectionList': [r'outlet'],r'PatchName': r'pres_outlet_1',r'ZoneType': r'pressure-outlet',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['pres_outlet_1'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Arguments.set_state({r'InvokeShareTopology': r'No',r'NonConformal': r'Yes',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Arguments.set_state({r'InvokeShareTopology': r'Yes',r'NonConformal': r'No',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['ironcub-sizing'].Execute()\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Error*OK")')
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['external-sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOIControlName': r'external-sizing',r'BOIFaceLabelList': [r'inlet', r'outlet'],r'BOISize': 2,r'CompleteFaceLabelList': [r'ironcub-model-share-inlet', r'ironcub-model-share-outlet'],})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['external-sizing'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Clipping Planes)*CheckButton5(Insert Clipping Planes)" #t)(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Clipping Planes)*CheckButton5(Insert Clipping Planes)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "PushButton(forward)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "PushButton(forward)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "PushButton(forward)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "PushButton(forward)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "PushButton(forward)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "PushButton(forward)")')
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-0.000513792 -1.24984 0.70406) '(0 0 0) '(0.368272 0.284162 0.50635) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.0708486 -0.216787 0.00506043) '(0 0 0) '(0.246968 -0.0397814 0.278968) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(2.27301 0.914718 -2.99916) '(0 0 0) '(-0.0698018 0.0241462 -0.0706277) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.503506 0.326386 -2.09157) '(0 0 0) '(0.044681 -0.00169706 -0.0064977) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.0688306 0.118041 -0.0730256) '(0 0 0) '(-0.103248 -0.0223421 0.0989192) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.0832973 0.730263 7.15781) '(0 0 0) '(-0.56659 -0.227741 0.0670388) 0 0)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Arguments.set_state({r'InterfaceSelect': r'Automatic',r'ShareTopologyPreferences': {r'ShowShareTopologyPreferences': True,},})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Arguments.set_state({r'InvokeShareTopology': r'No',r'NonConformal': r'Yes',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
system2.Delete()
Save(Overwrite=True)
system3 = template2.CreateSystem(
    DataTransferFrom=[Set(FromComponent=geometryComponent1, TransferName=None, ToComponentTemplate=componentTemplate1)],
    Position="Right",
    RelativeTo=system1)
setup2 = system3.GetContainer(ComponentName="Setup")
fluentLauncherSettings2 = setup2.GetFluentLauncherSettings()
fluentLauncherSettings2.SetEntityProperties(Properties=Set(Precision="Double", EnvPath={}, RunParallel=True, NumberOfProcessorsMeshing=10, NumberOfProcessors=10))
tGridData2 = GetDataEntity("/Mesh/TGridData:TGridData")
tGridData2.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=10))
mesh2 = system3.GetContainer(ComponentName="Mesh")
Fluent.Edit(Container=mesh2)
setup2.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent2 = system3.GetComponent(Name="Mesh")
meshComponent2.Refresh()
setup2.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup2.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.LengthUnit.set_state(r'm')\")")
setup2.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.AreaUnit.set_state(r'm^2')\")")
setup2.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.VolumeUnit.set_state(r'm^3')\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOIControlName': r'facesize_1',r'BOIFaceLabelList': [r'ironcub-share-left_arm-left_arm', r'ironcub-share-left_arm_pitch-left_arm_pitch', r'ironcub-share-left_arm_roll-left_arm_roll', r'ironcub-share-left_leg_lower-left_leg_lower', r'ironcub-share-left_leg_pitch-left_leg_pitch', r'ironcub-share-left_leg_roll-left_leg_roll', r'ironcub-share-left_leg_upper-left_leg_upper', r'ironcub-share-left_turbine-left_turbine', r'ironcub-share-right_arm-right_arm', r'ironcub-share-right_arm_pitch-right_arm_pitch', r'ironcub-share-right_arm_roll-right_arm_roll', r'ironcub-share-right_leg_lower-right_leg_lower', r'ironcub-share-right_leg_pitch-right_leg_pitch', r'ironcub-share-right_leg_roll-right_leg_roll', r'ironcub-share-right_leg_upper-right_leg_upper', r'ironcub-share-right_turbine-right_turbine', r'ironcub-share-root_link-solid', r'ironcub-share-torso_pitch-torso_pitch', r'ironcub-share-torso_roll-torso_roll', r'ironcub-share-upper_body-head', r'ironcub-share-upper_body-left_back_turbine', r'ironcub-share-upper_body-right_back_turbine', r'ironcub-share-upper_body-torso'],r'BOISize': 0.02,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate()\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOIControlName': r'external-sizing',r'BOIFaceLabelList': [r'inlet', r'outlet'],r'BOISize': 2,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate()\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Arguments.set_state({r'CFDSurfaceMeshControls': {r'MaxSize': 4,r'MinSize': 0.005,},})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Arguments.set_state({r'SetupType': r'The geometry consists of both fluid and solid regions and/or voids',})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=True)\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Execute()\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Revert()\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].InsertNextTask(CommandName=r'ImproveSurfaceMesh')\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Surface Mesh'].Arguments.set_state({r'FaceQualityLimit': 0.7,r'MeshObject': r'',r'SMImprovePreferences': {r'SIQualityCollapseLimit': 0.85,r'SIQualityIterations': 5,r'SIQualityMaxAngle': 160,r'SIRemoveStep': r'no',r'SIStepQualityLimit': 0,r'SIStepWidth': 0,r'ShowSMImprovePreferences': False,},r'SQMinSize': 0.005,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Surface Mesh'].Arguments.set_state({r'FaceQualityLimit': 0.8,r'MeshObject': r'',r'SMImprovePreferences': {r'SIQualityCollapseLimit': 0.9,r'SIQualityIterations': 5,r'SIQualityMaxAngle': 160,r'SIRemoveStep': r'no',r'SIStepQualityLimit': 0,r'SIStepWidth': 0,r'ShowSMImprovePreferences': False,},r'SQMinSize': 0.005,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Surface Mesh'].Execute()\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Surface Mesh'].Arguments.set_state({r'FaceQualityLimit': 0.7,r'MeshObject': r'',r'SMImprovePreferences': {r'SIQualityCollapseLimit': 0.9,r'SIQualityIterations': 5,r'SIQualityMaxAngle': 160,r'SIRemoveStep': r'no',r'SIStepQualityLimit': 0,r'SIStepWidth': 0,r'ShowSMImprovePreferences': False,},r'SQMinSize': 0.005,})\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Surface Mesh'].Revert()\")")
setup2.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Surface Mesh'].Execute()\")")
setup2.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
system3.Delete()
Save(Overwrite=True)
system4 = template2.CreateSystem(
    DataTransferFrom=[Set(FromComponent=geometryComponent1, TransferName=None, ToComponentTemplate=componentTemplate1)],
    Position="Right",
    RelativeTo=system1)
setup3 = system4.GetContainer(ComponentName="Setup")
fluentLauncherSettings3 = setup3.GetFluentLauncherSettings()
fluentLauncherSettings3.SetEntityProperties(Properties=Set(Precision="Double", EnvPath={}, RunParallel=True, NumberOfProcessorsMeshing=10, NumberOfProcessors=10))
tGridData3 = GetDataEntity("/Mesh/TGridData:TGridData")
tGridData3.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=10))
mesh3 = system4.GetContainer(ComponentName="Mesh")
Fluent.Edit(Container=mesh3)
setup3.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent3 = system4.GetComponent(Name="Mesh")
meshComponent3.Refresh()
setup3.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup3.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.LengthUnit.set_state(r'm')\")")
setup3.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.AreaUnit.set_state(r'm^2')\")")
setup3.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.VolumeUnit.set_state(r'm^3')\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOIControlName': r'ironcub-sizing',r'BOIFaceLabelList': [r'ironcub-share-left_arm-left_arm', r'ironcub-share-left_arm_pitch-left_arm_pitch', r'ironcub-share-left_arm_roll-left_arm_roll', r'ironcub-share-left_leg_lower-left_leg_lower', r'ironcub-share-left_leg_pitch-left_leg_pitch', r'ironcub-share-left_leg_roll-left_leg_roll', r'ironcub-share-left_leg_upper-left_leg_upper', r'ironcub-share-left_turbine-left_turbine', r'ironcub-share-right_arm-right_arm', r'ironcub-share-right_arm_pitch-right_arm_pitch', r'ironcub-share-right_arm_roll-right_arm_roll', r'ironcub-share-right_leg_lower-right_leg_lower', r'ironcub-share-right_leg_pitch-right_leg_pitch', r'ironcub-share-right_leg_roll-right_leg_roll', r'ironcub-share-right_leg_upper-right_leg_upper', r'ironcub-share-right_turbine-right_turbine', r'ironcub-share-root_link-solid', r'ironcub-share-torso_pitch-torso_pitch', r'ironcub-share-torso_roll-torso_roll', r'ironcub-share-upper_body-head', r'ironcub-share-upper_body-left_back_turbine', r'ironcub-share-upper_body-right_back_turbine', r'ironcub-share-upper_body-torso'],r'BOISize': 0.02,})\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOIControlName': r'external-sizing',r'BOIFaceLabelList': [r'inlet', r'outlet'],r'BOISize': 2,})\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Arguments.set_state({r'CFDSurfaceMeshControls': {r'MaxSize': 4,r'MinSize': 0.005,},})\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Arguments.set_state({r'SetupType': r'The geometry consists of both fluid and solid regions and/or voids',})\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=True)\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].InsertNextTask(CommandName=r'ImproveSurfaceMesh')\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Surface Mesh'].Arguments.set_state({r'FaceQualityLimit': 0.7,r'MeshObject': r'',r'SMImprovePreferences': {r'SIQualityCollapseLimit': 0.85,r'SIQualityIterations': 5,r'SIQualityMaxAngle': 160,r'SIRemoveStep': r'no',r'SIStepQualityLimit': 0,r'SIStepWidth': 0,r'ShowSMImprovePreferences': False,},r'SQMinSize': 0.005,})\")")
setup3.SendCommand(Command="(%py-exec \"workflow.DeleteTasks(ListOfTasks=[r'Improve Surface Mesh'])\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].InsertNextTask(CommandName=r'ImproveSurfaceMesh')\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Surface Mesh'].Arguments.set_state({r'FaceQualityLimit': 0.7,r'MeshObject': r'',r'SMImprovePreferences': {r'SIQualityCollapseLimit': 0.85,r'SIQualityIterations': 5,r'SIQualityMaxAngle': 160,r'SIRemoveStep': r'no',r'SIStepQualityLimit': 0,r'SIStepWidth': 0,r'ShowSMImprovePreferences': False,},r'SQMinSize': 0.005,})\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Surface Mesh'].Execute()\")")
setup3.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-0.180741 -0.225367 0.408748) '(0 0 0) '(0.0962403 0.0713267 0.0193471) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.0918515 0.126721 -0.215052) '(0 0 0) '(-0.0132863 -0.0642 -0.0814466) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.0868947 -0.14971 0.236301) '(0 0 0) '(0.0325637 0.0705302 0.075958) 0 0)")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Regions'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Boundary Layers'].Arguments.set_state({r'LocalPrismPreferences': {r'Continuous': r'Stair Step',},r'NumberOfLayers': 5,})\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Boundary Layers'].AddChildAndUpdate()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Arguments.set_state({r'VolumeFill': r'poly-hexcore',r'VolumeFillControls': {r'HexMaxCellLength': 2.56,r'HexMinCellLength': 0.04,r'PeelLayers': 2,},})\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Regions'].Revert()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Arguments.set_state({r'MeshSolidRegions': False,r'VolumeFill': r'poly-hexcore',r'VolumeFillControls': {r'HexMaxCellLength': 2.56,r'HexMinCellLength': 0.04,r'PeelLayers': 2,},})\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Question*PanelButtons*PushButton1(OK)")')
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].ExecuteUpstreamNonExecutedAndThisTask()\")")
setup3.SendCommand(Command="(cx-gui-do cx-set-toggle-button2 \"Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Clipping Planes)*ButtonBox1*Limit in X\" #t)(cx-gui-do cx-activate-item \"Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Clipping Planes)*ButtonBox1*Limit in X\")(cx-use-window-id 51)(cx-use-window-id 51)(cx-gui-do cx-set-toggle-button2 \"Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Clipping Planes)*ButtonBox1*Limit in Z\" #t)(cx-gui-do cx-activate-item \"Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Clipping Planes)*ButtonBox1*Limit in Z\")(cx-gui-do cx-set-toggle-button2 \"Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Clipping Planes)*ButtonBox1*Limit in X\" #t)(cx-gui-do cx-activate-item \"Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Clipping Planes)*ButtonBox1*Limit in X\")(cx-use-window-id 51)(cx-set-camera-relative '(1.54008 -1.43768 -0.83452) '(0 0 0) '(0.219232 0.22799 0.283736) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.236432 -0.00498366 -2.23421) '(0 0 0) '(-0.183604 -0.0715694 0.0195446) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.736637 0.362123 8.1717) '(0 0 0) '(0.145654 0.0623813 -0.00609294) 0 0)")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
setupComponent1 = system4.GetComponent(Name="Setup")
setupComponent1.Refresh()
fluentLauncherSettings3.SetEntityProperties(Properties=Set(EnvPath={}))
setup3.Edit()
setup3.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup3.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*Table1*ButtonBox3*PushButton1(New)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*Force ReportSubMenu*Drag...")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Drag Report Definition*PanelButtons*PushButton2(Cancel)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*PanelButtons*PushButton1(Close)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "General*Table1*ButtonBox1(Mesh)*PushButton2(Display)")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(0.452409 -1.10058 0.490854) '(0 0 0) '(0.284972 0.246871 0.29098) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.0194837 0.0480857 -0.00498956) '(0 0 0) '(-0.0460814 -0.025069 -0.053574) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.934984 0.166942 0.29147) '(0 0 0) '(0.0569929 -0.0730783 -0.212697) 0 0)(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '())(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 12))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 12 13))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 12 13 14))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 12 13 14 15))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 12 13 14 15 16))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 12 13 14 15 16 17))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 7 12 13 14 15 16 17))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 12 13 14 15 16 17))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 12 13 14 15 16 17 26))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 12 13 14 15 16 17 26 32))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(0.686267 -1.46242 0.124696) '(0 0 0) '(0.102449 0.112621 0.702849) 0 0)(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 12 13 14 15 16 17 26 27 32))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 12 13 14 15 16 17 26 27 28 32))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Mesh Display*PanelButtons*PushButton2(Cancel)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
geometry1.Edit(IsSpaceClaimGeometry=True)
geometry1.Exit()
geometry1.SetFile(FilePath=GetAbsoluteUserPathName("ANSYS/testing/share_topology_test/ironcub-model-share.scdoc"))
geometry1.Edit(IsSpaceClaimGeometry=True)
geometry1.Exit()
fluentLauncherSettings3.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData3.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=10))
Fluent.Edit(Container=mesh3)
setup3.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent3.Refresh()
setup3.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Without Save")(cx-gui-do cx-activate-item "Question*OK")')
geometry1.SetFile(FilePath=GetAbsoluteUserPathName("ANSYS/testing/share_topology_test/ironcub-model-share.scdoc"))
geometryComponent1.Reset()
geometry1.SetFile(FilePath=GetAbsoluteUserPathName("ANSYS/testing/share_topology_test/ironcub-model-share.scdoc"))
fluentLauncherSettings3.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData3.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=10))
Fluent.Edit(Container=mesh3)
setup3.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent3.Refresh()
setup3.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Without Save")(cx-gui-do cx-activate-item "Question*OK")')
geometry1.SetFile(FilePath=GetAbsoluteUserPathName("ANSYS/testing/share_topology_test/ironcub-model-share.scdoc"))
fluentLauncherSettings3.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData3.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=10))
Fluent.Edit(Container=mesh3)
setup3.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup3.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Without Save")(cx-gui-do cx-activate-item "Question*OK")')
geometryComponent1.Reset()
geometry1.SetFile(FilePath=GetAbsoluteUserPathName("ANSYS/testing/share_topology_test/ironcub-model-share.scdoc"))
fluentLauncherSettings3.SetEntityProperties(Properties=Set(EnvPath={}, NumberOfProcessorsMeshing=12, NumberOfProcessors=12))
tGridData3.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=12))
Fluent.Edit(Container=mesh3)
setup3.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent3.Refresh()
setup3.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['ironcub-sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOIControlName': r'ironcub-sizing',r'BOIFaceLabelList': [r'ironcub_head', r'ironcub_left_arm', r'ironcub_left_arm_pitch', r'ironcub_left_arm_roll', r'ironcub_left_back_turbine', r'ironcub_left_leg_lower', r'ironcub_left_leg_pitch', r'ironcub_left_leg_roll', r'ironcub_left_leg_upper', r'ironcub_left_turbine', r'ironcub_right_arm', r'ironcub_right_arm_pitch', r'ironcub_right_arm_roll', r'ironcub_right_back_turbine', r'ironcub_right_leg_lower', r'ironcub_right_leg_pitch', r'ironcub_right_leg_roll', r'ironcub_right_leg_upper', r'ironcub_right_turbine', r'ironcub_root_link', r'ironcub_torso', r'ironcub_torso_pitch', r'ironcub_torso_roll'],r'BOISize': 0.02,r'CompleteFaceLabelList': [r'ironcub-share-left_arm-left_arm', r'ironcub-share-left_arm_pitch-left_arm_pitch', r'ironcub-share-left_arm_roll-left_arm_roll', r'ironcub-share-left_leg_lower-left_leg_lower', r'ironcub-share-left_leg_pitch-left_leg_pitch', r'ironcub-share-left_leg_roll-left_leg_roll', r'ironcub-share-left_leg_upper-left_leg_upper', r'ironcub-share-left_turbine-left_turbine', r'ironcub-share-right_arm-right_arm', r'ironcub-share-right_arm_pitch-right_arm_pitch', r'ironcub-share-right_arm_roll-right_arm_roll', r'ironcub-share-right_leg_lower-right_leg_lower', r'ironcub-share-right_leg_pitch-right_leg_pitch', r'ironcub-share-right_leg_roll-right_leg_roll', r'ironcub-share-right_leg_upper-right_leg_upper', r'ironcub-share-right_turbine-right_turbine', r'ironcub-share-root_link-solid', r'ironcub-share-torso_pitch-torso_pitch', r'ironcub-share-torso_roll-torso_roll', r'ironcub-share-upper_body-head', r'ironcub-share-upper_body-left_back_turbine', r'ironcub-share-upper_body-right_back_turbine', r'ironcub-share-upper_body-torso'],})\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['ironcub-sizing'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['external-sizing'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].Revert()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Arguments.set_state({r'RetainDeadRegionName': r'yes',})\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Surface Mesh'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Regions'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['smooth-transition_1'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].InsertNextTask(CommandName=r'ImproveVolumeMesh')\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Volume Mesh'].Arguments.set_state({r'CellQualityLimit': 0.15,r'VMImprovePreferences': {r'ShowVMImprovePreferences': False,r'VIQualityIterations': 5,r'VIQualityMinAngle': 0,r'VIgnoreFeature': r'yes',},})\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Volume Mesh'].Execute()\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Solution)*PushButton1(Switch to Solution)")(cx-gui-do cx-activate-item "Question*Cancel")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
setupComponent1.Refresh()
fluentLauncherSettings3.SetEntityProperties(Properties=Set(EnvPath={}, NumberOfProcessorsMeshing=20, NumberOfProcessors=20))
setup3.Edit()
setup3.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup3.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-item "Information*OK")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Recorded Mesh Operations...")')
setup3.SendCommand(Command="(cx-gui-do cx-activate-item \"Recorded Mesh Operations and Incoming Zones*PushButton5(Match Zone Names)\")(cx-gui-do cx-set-list-selections \"Match Zone Names*Frame1*List1(Missing Zones)\" '( 0))(cx-gui-do cx-activate-item \"Match Zone Names*Frame1*List1(Missing Zones)\")(cx-gui-do cx-set-list-selections \"Match Zone Names*Frame1*List2(New Zones)\" '( 0))(cx-gui-do cx-activate-item \"Match Zone Names*Frame1*List2(New Zones)\")(cx-gui-do cx-set-list-selections \"Match Zone Names*Frame1*List1(Missing Zones)\" '( 0))(cx-gui-do cx-activate-item \"Match Zone Names*Frame1*List1(Missing Zones)\")(cx-gui-do cx-set-list-selections \"Match Zone Names*Frame1*List1(Missing Zones)\" '( 10))(cx-gui-do cx-activate-item \"Match Zone Names*Frame1*List1(Missing Zones)\")(cx-gui-do cx-set-list-selections \"Match Zone Names*Frame1*List1(Missing Zones)\" '( 31))(cx-gui-do cx-activate-item \"Match Zone Names*Frame1*List1(Missing Zones)\")(cx-gui-do cx-activate-item \"Match Zone Names*PanelButtons*PushButton2(Cancel)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Recorded Mesh Operations and Incoming Zones*PanelButtons*PushButton1(Close)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Without Save")(cx-gui-do cx-activate-item "Question*OK")')
geometryComponent1.Reset()
geometry1.SetFile(FilePath=GetAbsoluteUserPathName("ANSYS/testing/share_topology_test/ironcub-model-share.scdoc"))
fluentLauncherSettings3.SetEntityProperties(Properties=Set(EnvPath={}, NumberOfProcessorsMeshing=20))
tGridData3.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=20))
Fluent.Edit(Container=mesh3)
setup3.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent3.Refresh()
setup3.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
geometryComponent1.Reset()
geometry1.SetFile(FilePath=GetAbsoluteUserPathName("ANSYS/testing/share_topology_test/ironcub-model-share.scdoc"))
meshComponent3.Refresh()
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Without Save")(cx-gui-do cx-activate-item "Question*OK")')
fluentLauncherSettings3.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData3.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=20))
Fluent.Edit(Container=mesh3)
setup3.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup3.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Revert()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['ironcub-sizing'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['external-sizing'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Apply Share Topology'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Surface Mesh'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Regions'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['smooth-transition_1'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Arguments.set_state({r'RetainDeadRegionName': r'no',})\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Revert()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Surface Mesh'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Regions'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['smooth-transition_1'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Execute()\")")
setup3.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Volume Mesh'].Execute()\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
setupComponent1.Refresh()
fluentLauncherSettings3.SetEntityProperties(Properties=Set(EnvPath={}))
setup3.Edit()
setup3.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup3.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-item "Information*OK")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
setupComponent1.Reset()
setupComponent1.Refresh()
fluentLauncherSettings3.SetEntityProperties(Properties=Set(DisplayText="Fluent Launcher Settings", Precision="Double", EnvPath={}, RunParallel=True, NumberOfProcessorsMeshing=20, NumberOfProcessors=20))
setup3.Edit()
setup3.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup3.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|Boundary Conditions|Inlet|inlet (velocity-inlet, id=187)"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|Boundary Conditions|Inlet|inlet (velocity-inlet, id=187)"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|Boundary Conditions|Inlet|inlet (velocity-inlet, id=187)"))(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 1)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 2)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 3)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 4)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 5)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 6)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 7)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 8)(cx-gui-do cx-activate-tab-index "Velocity Inlet*Frame2*Frame2" 0)(cx-gui-do cx-activate-item "Velocity Inlet*PanelButtons*PushButton2(Cancel)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*Table1*ButtonBox3*PushButton1(New)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*Force ReportSubMenu*Drag...")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Drag Report Definition*PanelButtons*PushButton2(Cancel)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*PanelButtons*PushButton1(Close)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "General*Table1*ButtonBox1(Mesh)*PushButton2(Display)")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(0.124277 -0.906281 0.580193) '(0 0 0) '(0.365737 0.257931 0.274853) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.955573 1.06337 0.0180452) '(0 0 0) '(-0.0494884 -0.108171 -0.256556) 0 0)(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton2(Cancel)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
geometry1.Edit(IsSpaceClaimGeometry=True)
geometry1.Exit()
meshComponent3.Update(AllDependencies=True)
setup3.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup3.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup3.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup3.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setupComponent1.Refresh()
setupComponent1.Reset()
setupComponent1.Refresh()
fluentLauncherSettings3.SetEntityProperties(Properties=Set(DisplayText="Fluent Launcher Settings", Precision="Double", EnvPath={}, RunParallel=True, NumberOfProcessorsMeshing=20, NumberOfProcessors=20))
setup3.Edit()
setup3.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup3.SendCommand(Command='/file/set-tui-version "23.1"(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*Table1*ButtonBox3*PushButton1(New)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*Force ReportSubMenu*Drag...")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Drag Report Definition*PanelButtons*PushButton2(Cancel)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*PanelButtons*PushButton1(Close)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "General*Table1*ButtonBox1(Mesh)*PushButton2(Display)")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(1.7199 -4.43521 -1.61457) '(0 0 0) '(0.850898 0.206968 0.703331) 0 0)(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 25))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*Graphics Effects*shadow")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*PopupMenugraphics-shadows*Static Shadows")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*Graphics Effects*gridplane")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*Graphics Effects*shadow")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*Graphics Effects*reflection")')
setup3.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-2.80147 -1.83266 2.04445) '(0 0 0) '(0.427294 -0.374026 0.117254) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(1.92684 0.425958 -2.67653) '(0 0 0) '(-0.112569 0.159986 -0.0619094) 0 0)(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 25))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 0 25))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-0.17617 7.06476 -18.4352) '(0 0 0) '(0.00015229 -0.00243711 0.0061233) 0 0)(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 25))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*View*autoscale")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 1 25))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 25))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 5 25))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-0.488321 0.159947 0.800341) '(0 0 0) '(-0.134116 0.103288 0.0107818) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.0169594 0.000307065 -0.00496258) '(0 0 0) '(-0.149275 0.122154 -0.318269) 0 0)(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 5 21 25))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-0.166983 -0.150851 -2.72527) '(0 0 0) '(0.111859 -0.0537014 0.0377962) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.763077 0.117443 1.32656) '(0 0 0) '(-0.329511 -0.120462 -0.63706) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-1.19956 0.632019 1.77958) '(0 0 0) '(0.583613 -0.158192 0.340064) 0 0)(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 25))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-use-window-id 51)(cx-set-camera-relative '(-1.10078 0.783502 -1.17764) '(0 0 0) '(0.0226769 0.0461763 0.304209) 0 0)(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(1.20228 -2.81255 4.15844) '(0 0 0) '(-0.440161 0.306657 0.0171932) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(4.47679 -3.31892 -3.17612) '(0 0 0) '(0.205391 -0.25744 0.472231) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.18589 -0.162415 -0.0771112) '(0 0 0) '(0.294263 -0.161253 -0.304925) 0 0)(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton2(Cancel)\")")
setup3.SendCommand(Command='(cx-use-window-id 51)(handle-key "??")(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|General"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|General"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|General"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|Models|Viscous (SST k-omega)"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|Models|Viscous (SST k-omega)"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|Models|Viscous (SST k-omega)"))(cx-gui-do cx-set-toggle-button2 "Viscous Model*Table1*ToggleBox21(Options)*CheckButton9(Production Kato-Launder)" #t)(cx-gui-do cx-activate-item "Viscous Model*Table1*ToggleBox21(Options)*CheckButton9(Production Kato-Launder)")(cx-gui-do cx-activate-item "Viscous Model*PanelButtons*PushButton1(OK)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|Boundary Conditions|Inlet|inlet (velocity-inlet, id=177)"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|Boundary Conditions|Inlet|inlet (velocity-inlet, id=177)"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*Frame2*Table1*List_Tree2\" (list \"Setup|Boundary Conditions|Inlet|inlet (velocity-inlet, id=177)\"))(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 1)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 2)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 3)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 4)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 5)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 6)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 7)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 8)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-set-list-selections \"Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*DropDownList7(Velocity Specification Method)\" '( 0))(cx-gui-do cx-enable-apply-button \"Velocity Inlet\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*DropDownList7(Velocity Specification Method)")')
setup3.SendCommand(Command="(cx-gui-do cx-set-expression-entry \"Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table9*ExpressionEntry1(Velocity Magnitude)\" '(\"17\" . 0))(cx-gui-do cx-set-expression-entry \"Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table20*ExpressionEntry1(X-Component of Flow Direction)\" '(\"0\" . 0))(cx-gui-do cx-set-expression-entry \"Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table22*ExpressionEntry1(Z-Component of Flow Direction)\" '(\"-1\" . 0))(cx-gui-do cx-set-expression-entry \"Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table5(Turbulence)*ExpressionEntry9(Turbulent Intensity)\" '(\"0.001\" . 0))(cx-gui-do cx-set-expression-entry \"Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table5(Turbulence)*ExpressionEntry12(Turbulent Viscosity Ratio)\" '(\"0.01\" . 0))(cx-gui-do cx-activate-item \"Velocity Inlet*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Velocity Inlet*PanelButtons*PushButton1(OK)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Velocity Inlet*PanelButtons*PushButton1(OK)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Velocity Inlet*PanelButtons*PushButton2(Cancel)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|Boundary Conditions|Outlet|outlet (pressure-outlet, id=178)"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|Boundary Conditions|Outlet|outlet (pressure-outlet, id=178)"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*Frame2*Table1*List_Tree2\" (list \"Setup|Boundary Conditions|Outlet|outlet (pressure-outlet, id=178)\"))(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 1)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 2)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 3)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 4)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 5)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 6)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 7)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 8)(cx-gui-do cx-activate-tab-index \"Pressure Outlet*Frame2*Frame2\" 0)(cx-gui-do cx-set-list-selections \"Pressure Outlet*Frame2*Frame2*Frame1(Momentum)*Table1*DropDownList9(Backflow Direction Specification Method)\" '( 2))(cx-gui-do cx-enable-apply-button \"Pressure Outlet\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Pressure Outlet*Frame2*Frame2*Frame1(Momentum)*Table1*DropDownList9(Backflow Direction Specification Method)")')
setup3.SendCommand(Command="(cx-gui-do cx-set-expression-entry \"Pressure Outlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table3(Turbulence)*ExpressionEntry9(Backflow Turbulent Intensity)\" '(\"0.001\" . 0))(cx-gui-do cx-set-expression-entry \"Pressure Outlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table3(Turbulence)*ExpressionEntry12(Backflow Turbulent Viscosity Ratio)\" '(\"0.01\" . 0))(cx-gui-do cx-activate-item \"Pressure Outlet*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Pressure Outlet*PanelButtons*PushButton2(Cancel)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|Reference Values"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|Reference Values"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|Reference Values"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*Frame2*Table1*List_Tree2\" (list \"Setup|Reference Values\"))(cx-gui-do cx-set-list-selections \"Reference Values*DropDownList1(Compute from)\" '( 2))")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Reference Values*DropDownList1(Compute from)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Methods"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Methods"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*Frame2*Table1*List_Tree2\" (list \"Solution|Methods\"))(cx-gui-do cx-set-list-selections \"Solution Methods*Table1*Table5*DropDownList1(Pseudo Time Method)\" '( 0))")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Solution Methods*Table1*Table5*DropDownList1(Pseudo Time Method)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Controls"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Controls"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*Frame2*Table1*List_Tree2\" (list \"Solution|Controls\"))(cx-gui-do cx-set-real-entry-list \"Solution Controls*Table1*Table1*RealEntry2(Flow Courant Number)\" '( 10))(cx-gui-do cx-activate-item \"Solution Controls*Table1*Table1*RealEntry2(Flow Courant Number)\")")
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list ))(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*Table1*ButtonBox3*PushButton1(New)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*Force ReportSubMenu*Drag...")')
setup3.SendCommand(Command='(cx-gui-do cx-set-text-entry "Drag Report Definition*Table1*TextEntry3(Name)" "cd-head")(cx-gui-do cx-activate-item "Drag Report Definition*Table1*TextEntry3(Name)")')
setup3.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Drag Report Definition*Table1*Table1*Table2*Table2(Force Vector)*RealEntry1(X)\" '( 0))(cx-gui-do cx-set-real-entry-list \"Drag Report Definition*Table1*Table1*Table2*Table2(Force Vector)*RealEntry3(Z)\" '( -1))(cx-gui-do cx-set-toggle-button2 \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)\" #f)(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)\")(cx-gui-do cx-set-toggle-button2 \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)\" #f)(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)\")(cx-gui-do cx-set-list-selections \"Drag Report Definition*Table1*Table2*List2(Zones)\" '( 0))(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*Table2*List2(Zones)\")(cx-gui-do cx-activate-item \"Drag Report Definition*PanelButtons*PushButton2(Cancel)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*PanelButtons*PushButton1(Close)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Parameters & Customization|Parameters|Output Parameters"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Parameters & Customization|Parameters|Output Parameters"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Parameters & Customization|Parameters|Output Parameters"))')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Parameters*Table1*Table1*Table2*PushButton3(More)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Parameters*Table1*Table2*Table2*PushButton1(Create)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Parameters*PanelButtons*PushButton1(Close)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Report Definitions"))')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*Table1*ButtonBox3*PushButton1(New)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*Force ReportSubMenu*Drag...")')
setup3.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Drag Report Definition*Table1*Table1*Table2*Table2(Force Vector)*RealEntry1(X)\" '( 0))(cx-gui-do cx-set-real-entry-list \"Drag Report Definition*Table1*Table1*Table2*Table2(Force Vector)*RealEntry3(Z)\" '( -1))(cx-gui-do cx-set-text-entry \"Drag Report Definition*Table1*TextEntry3(Name)\" \"cd-head\")(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*TextEntry3(Name)\")")
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Drag Report Definition*Table1*Table2*List2(Zones)\" '( 0))(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*Table2*List2(Zones)\")(cx-gui-do cx-set-toggle-button2 \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)\" #f)(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)\")(cx-gui-do cx-set-toggle-button2 \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)\" #f)(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)\")(cx-gui-do cx-activate-item \"Drag Report Definition*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*Table1*ButtonBox3*PushButton1(New)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*Force ReportSubMenu*Lift...")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Lift Report Definition*Table1*Table2*List2(Zones)\" '( 0))(cx-gui-do cx-activate-item \"Lift Report Definition*Table1*Table2*List2(Zones)\")(cx-gui-do cx-set-text-entry \"Lift Report Definition*Table1*TextEntry3(Name)\" \"cl-head\")(cx-gui-do cx-activate-item \"Lift Report Definition*Table1*TextEntry3(Name)\")")
setup3.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Lift Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)" #f)(cx-gui-do cx-activate-item "Lift Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)")(cx-gui-do cx-set-toggle-button2 "Lift Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)" #f)(cx-gui-do cx-activate-item "Lift Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)")(cx-gui-do cx-activate-item "Lift Report Definition*PanelButtons*PushButton1(OK)")')
setup3.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(2.22981 12.1991 5.29576) '(0 0 0) '(-1.14375 0.417614 -0.304313) 0 0)")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*Table1*ButtonBox3*PushButton1(New)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*Force ReportSubMenu*Force...")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Force Report Definition*PanelButtons*PushButton2(Cancel)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*Table1*ButtonBox3*PushButton1(New)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*Force ReportSubMenu*Drag...")')
setup3.SendCommand(Command='(cx-gui-do cx-set-text-entry "Drag Report Definition*Table1*TextEntry3(Name)" "cs-head")(cx-gui-do cx-activate-item "Drag Report Definition*Table1*TextEntry3(Name)")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Drag Report Definition*Table1*Table2*List2(Zones)\" '( 0))(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*Table2*List2(Zones)\")(cx-gui-do cx-set-real-entry-list \"Drag Report Definition*Table1*Table1*Table2*Table2(Force Vector)*RealEntry1(X)\" '( -1))(cx-gui-do cx-set-toggle-button2 \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)\" #f)(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)\")(cx-gui-do cx-set-toggle-button2 \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)\" #f)(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)\")(cx-gui-do cx-activate-item \"Drag Report Definition*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*Table1*ButtonBox3*PushButton1(New)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*Force ReportSubMenu*Drag...")')
setup3.SendCommand(Command='(cx-gui-do cx-set-text-entry "Drag Report Definition*Table1*TextEntry3(Name)" "cd-ironcub")(cx-gui-do cx-activate-item "Drag Report Definition*Table1*TextEntry3(Name)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Drag Report Definition*Table1*Table2*List2(Zones)")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Drag Report Definition*Table1*Table2*List2(Zones)\" '( 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22))(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*Table2*List2(Zones)\")(cx-gui-do cx-set-real-entry-list \"Drag Report Definition*Table1*Table1*Table2*Table2(Force Vector)*RealEntry1(X)\" '( 0))(cx-gui-do cx-set-real-entry-list \"Drag Report Definition*Table1*Table1*Table2*Table2(Force Vector)*RealEntry3(Z)\" '( -1))(cx-gui-do cx-set-toggle-button2 \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)\" #f)(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)\")(cx-gui-do cx-set-toggle-button2 \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)\" #f)(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)\")(cx-gui-do cx-activate-item \"Drag Report Definition*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*Table1*ButtonBox3*PushButton1(New)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*Force ReportSubMenu*Lift...")')
setup3.SendCommand(Command='(cx-gui-do cx-set-text-entry "Lift Report Definition*Table1*TextEntry3(Name)" "cl-ironcub")(cx-gui-do cx-activate-item "Lift Report Definition*Table1*TextEntry3(Name)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Lift Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)" #f)(cx-gui-do cx-activate-item "Lift Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)")(cx-gui-do cx-set-toggle-button2 "Lift Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)" #f)(cx-gui-do cx-activate-item "Lift Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Lift Report Definition*Table1*Table2*List2(Zones)")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Lift Report Definition*Table1*Table2*List2(Zones)\" '( 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22))(cx-gui-do cx-activate-item \"Lift Report Definition*Table1*Table2*List2(Zones)\")(cx-gui-do cx-activate-item \"Lift Report Definition*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*Table1*ButtonBox3*PushButton1(New)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*Force ReportSubMenu*Drag...")')
setup3.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Drag Report Definition*Table1*Table1*Table2*Table2(Force Vector)*RealEntry1(X)\" '( -1))(cx-gui-do cx-set-text-entry \"Drag Report Definition*Table1*TextEntry3(Name)\" \"cs-ironcub\")(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*TextEntry3(Name)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Drag Report Definition*Table1*Table2*List2(Zones)")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Drag Report Definition*Table1*Table2*List2(Zones)\" '( 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22))(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*Table2*List2(Zones)\")(cx-gui-do cx-set-toggle-button2 \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)\" #f)(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)\")(cx-gui-do cx-set-toggle-button2 \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)\" #f)(cx-gui-do cx-activate-item \"Drag Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)\")(cx-gui-do cx-activate-item \"Drag Report Definition*PanelButtons*PushButton1(OK)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report Definitions*PanelButtons*PushButton1(Close)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Monitors|Report Plots"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Monitors|Report Plots"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Monitors|Report Plots"))(cx-gui-do cx-activate-item "Report Plot Definitions*PanelButtons*PushButton1(Close)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Monitors|Report Files"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Monitors|Report Files"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Monitors|Report Files"))')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report File Definitions*Table1*ButtonBox3*PushButton1(New)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-text-entry "New Report File*Table1*Table1*TextEntry1(Name)" "report")(cx-gui-do cx-activate-item "New Report File*Table1*Table1*TextEntry1(Name)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-text-entry "New Report File*Table1*Table6(File Name)*TextEntry1" "report.out")(cx-gui-do cx-set-integer-entry "New Report File*Table1*Table7*IntegerEntry1(Get Data Every)" 1000)(cx-gui-do cx-activate-item "New Report File*Table1*Table7*IntegerEntry1(Get Data Every)")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"New Report File*Table1*List2(Available Report Definitions)\" '( 0))(cx-gui-do cx-activate-item \"New Report File*Table1*List2(Available Report Definitions)\")(cx-gui-do cx-set-list-selections \"New Report File*Table1*List2(Available Report Definitions)\" '( 0 1))(cx-gui-do cx-activate-item \"New Report File*Table1*List2(Available Report Definitions)\")(cx-gui-do cx-set-list-selections \"New Report File*Table1*List2(Available Report Definitions)\" '( 0 1 2))(cx-gui-do cx-activate-item \"New Report File*Table1*List2(Available Report Definitions)\")(cx-gui-do cx-set-list-selections \"New Report File*Table1*List2(Available Report Definitions)\" '( 0 1 2 3))(cx-gui-do cx-activate-item \"New Report File*Table1*List2(Available Report Definitions)\")(cx-gui-do cx-set-list-selections \"New Report File*Table1*List2(Available Report Definitions)\" '( 0 1 2 3 4))(cx-gui-do cx-activate-item \"New Report File*Table1*List2(Available Report Definitions)\")(cx-gui-do cx-set-list-selections \"New Report File*Table1*List2(Available Report Definitions)\" '( 0 1 2 3 4 5))(cx-gui-do cx-activate-item \"New Report File*Table1*List2(Available Report Definitions)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "New Report File*Table1*Table4*PushButton1( Add>>)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "New Report File*PanelButtons*PushButton1(OK)")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Report File Definitions*Table1*List1(Report Files)\" '( 0))(cx-gui-do cx-activate-item \"Report File Definitions*Table1*List1(Report Files)\")")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report File Definitions*Table1*ButtonBox3*PushButton2(Edit)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Edit Report File*PanelButtons*PushButton1(OK)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Report File Definitions*PanelButtons*PushButton1(Close)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Monitors"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Monitors"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Monitors|Residual"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Monitors|Residual"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Monitors|Residual"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Monitors|Residual"))(cx-gui-do cx-set-toggle-button2 "Residual Monitors*Table1*Table2*Table1*Table1(Equations)*CheckButton10" #f)(cx-gui-do cx-activate-item "Residual Monitors*Table1*Table2*Table1*Table1(Equations)*CheckButton10")(cx-gui-do cx-set-toggle-button2 "Residual Monitors*Table1*Table2*Table1*Table1(Equations)*CheckButton16" #f)(cx-gui-do cx-activate-item "Residual Monitors*Table1*Table2*Table1*Table1(Equations)*CheckButton16")(cx-gui-do cx-set-toggle-button2 "Residual Monitors*Table1*Table2*Table1*Table1(Equations)*CheckButton22" #f)(cx-gui-do cx-activate-item "Residual Monitors*Table1*Table2*Table1*Table1(Equations)*CheckButton22")(cx-gui-do cx-set-toggle-button2 "Residual Monitors*Table1*Table2*Table1*Table1(Equations)*CheckButton28" #f)(cx-gui-do cx-activate-item "Residual Monitors*Table1*Table2*Table1*Table1(Equations)*CheckButton28")(cx-gui-do cx-set-toggle-button2 "Residual Monitors*Table1*Table2*Table1*Table1(Equations)*CheckButton34" #f)(cx-gui-do cx-activate-item "Residual Monitors*Table1*Table2*Table1*Table1(Equations)*CheckButton34")(cx-gui-do cx-set-toggle-button2 "Residual Monitors*Table1*Table2*Table1*Table1(Equations)*CheckButton40" #f)(cx-gui-do cx-activate-item "Residual Monitors*Table1*Table2*Table1*Table1(Equations)*CheckButton40")(cx-gui-do cx-activate-item "Residual Monitors*PanelButtons*PushButton1(OK)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Monitors"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Initialization"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Initialization"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*Frame2*Table1*List_Tree2\" (list \"Solution|Initialization\"))(cx-gui-do cx-set-toggle-button2 \"Solution Initialization*Table1*ToggleBox3(Initialization Methods)*Standard Initialization\" #t)(cx-gui-do cx-activate-item \"Solution Initialization*Table1*ToggleBox3(Initialization Methods)*Standard Initialization\")(cx-gui-do cx-set-list-selections \"Solution Initialization*Table1*DropDownList1(Compute from)\" '( 1))")
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Solution Initialization*Table1*DropDownList1(Compute from)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "Solution Initialization*Table1*Frame9*PushButton1(Initialize)")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Run Calculation"))')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Run Calculation"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
setup3.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Solution|Run Calculation"))(cx-gui-do cx-set-integer-entry "Run Calculation*Table1*Table3(Parameters)*Table1*Table1*IntegerEntry1(Number of Iterations)" 1000)(cx-gui-do cx-activate-item "Run Calculation*Table1*Table3(Parameters)*Table1*Table1*IntegerEntry1(Number of Iterations)")')
setup3.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
Save(Overwrite=True)
tGridData3.NumberOfProcs = 24
Save(Overwrite=True)
